priority -50
# imports
################################################################
snippet ilog "Logging boilerplate" b
# import the logging library
import logging
logger = logging.getLogger(__name__)
endsnippet

snippet itrans "The translation module" b
from django.utils.translation import ugettext_lazy as _
endsnippet

snippet iurl "Import url boilerplate" b
from django.conf.urls import url

from . import views
endsnippet

snippet uurl "url function call for urls.py" b
url(regex=r'^${1:}$',
	view=views.${2:Model}${3:-S-}View.as_view(),
	name='${3/.+/\L$0\E/g}'),
endsnippet

snippet idgra "graphene imports for django" b
from django.apps import apps

from channels import Group
from graphene_django.types import DjangoObjectType
from graphene import relay
import graphene

from graphquery.utils import genLoader
from graphquery.mixins import TypeMixin
endsnippet

snippet db "quick hard brake point" b
brakepoint()
endsnippet

# Test Snippets
################################################################
snippet tschema "Test a graphene schema" b
from graphquery.tests.utils import ts_gen
from ..schema import ${1:Model}Query, $1Mutation, $1Subscription, $1Loader


test_schema = ts_gen($1Query, Mutation=$1Mutation, Subscription=$1Subscritption)


class DataLoaders:

	def __init__(self):
		self.${1/.+/\L$0\E/g:model} = $1Loader()
endsnippet

snippet tgq "Test a basic query on a schema" b
def test_${1:base}(self):
	query = '''
		query Test ($uuid: String) {
			${1/.+/$0/g:base} (uuid: $uuid) {
			${2:name}
			uuid
			}
		}
		'''
	foovar = {
		'uuid': self.${1/.+/$0/g:base}1.uuid
		}

	expected = {'${1/.+/$0/g:base}': {
			'$2': '%s' % self.${1/.+/$0/g:base}1.$2 ,
			'uuid': '%s' % self.${1/.+/$0/g:base}1.uuid
			}}

	result = test_schema.execute(query, variable_values=foovar,  **self.kwargs)

	assert not result.errors
	assert result.data == expected
endsnippet

# Graphene
################################################################
snippet gboiler "graphene boilerplate" b
${1:Model} = apps.get_model('${1/.+/\L$0\E/g:model}', '$1')


class $1Type(TypeMixin, DjangoObjectType):

	"""Query API def for $1"""

	class Meta:
		model = $1
		only_fields = (${2:fields list})

		interfaces = (relay.Node, )

	def resolve_id(self, info, **args):
		return str(self.${3:uuid})


class ${1/.+/$0/g:model}Query(object):
	${1/.+/\L$0\E/g:model} = graphene.Field($1Type, $3=graphene.String(), description='retrieve a single $1')
	all_${1/.+/\L$0\E/g:model}s = graphene.List($1Type, description='retrieve all relevant $1')

	def resolve_${1/.+/\L$0\E/g:model}(self, info, **args):
		return info.context.dataloaders.${1/.+/\L$0\E/g:model}.load(args['$3'])

	def resolve_all_${1/.+/\L$0\E/g:model}s(self, info, **args):
		return $1Type.get_queryset()


$1Loader = genLoader($1Type, '$3')


class $1Input(graphene.InputObjectType):
	name = graphene.String()


class Create$1(graphene.Mutation):
	${1/.+/\L$0\E/g:model} = graphene.Field($1Type)
	form_messages = graphene.String()
	status = graphene.Int()

	class Arguments:
		${1/.+/\L$0\E/g:model}_data = $1Input(required=True)

	@staticmethod
	def mutate(root, info, **input):
		# Remember to import correct Form
		mform = $1Form(input['${1/.+/\L$0\E/g:model}_data'])
		if mform.is_valid():
			try:
				${1/.+/\L$0\E/g:model}inst = mform.save()
				return Create$1(
					${1/.+/\L$0\E/g:model}=${1/.+/\L$0\E/g:model}inst,
					form_messages=None,
					status=200)
			except Exception as e:
				return Create$1(
					${1/.+/\L$0\E/g:model}=None,
					form_messages='An internal error occurred.',
					status=500)
		return Create$1(
			${1/.+/\L$0\E/g:model}=None,
			form_messages=mform.errors,
			status=420)


class Update$1(graphene.Mutation):
	${1/.+/\L$0\E/g:model} = graphene.Field($1Type)
	form_messages = graphene.String()
	status = graphene.Int()

	class Arguments:
		${1/.+/\L$0\E/g:model}_data = $1Input(required=True)
		$3 = graphene.String()

	@staticmethod
	def mutate(root, info, **input):
		inst = $1.objects.get($3=input.pop('$3 '))
		# Remember to import correct Form
		mform = $1Form(input, instance=inst)
		if mform.is_valid():
			try:
				${1/.+/\L$0\E/g:model}inst = mform.save()
				return Update$1(
					${1/.+/\L$0\E/g:model}=${1/.+/\L$0\E/g:model}inst,
					form_messages=None,
					status=200)
			except Exception as e:
				return Update$1(
					${1/.+/\L$0\E/g:model}=None,
					form_messages='An internal error occurred.',
					status=500)
		return Update$1(
			${1/.+/\L$0\E/g:model}=None,
			form_messages=mform.errors,
			status=420)


class Delete$1(graphene.Mutation):
	${1/.+/\L$0\E/g:model} = graphene.Field($1Type)
	form_messages = graphene.String()
	status = graphene.Int()

	class Arguments:
		id = graphene.String()

	@staticmethod
	def mutate(root, info, **input):
		${1/.+/\L$0\E/g:model}_inst = $1.objects.get(pk=input.get('id'))
		try:
			${1/.+/\L$0\E/g:model}_inst.delete()
			return Delete$1(
				${1/.+/\L$0\E/g:model}=${1/.+/\L$0\E/g:model}_inst,
				form_messages=None,
				status=200)
		except Exception as e:
			return Update$1(
				${1/.+/\L$0\E/g:model}=${1/.+/\L$0\E/g:model}_inst,
				form_messages='An internal error occurred.',
				status=500)


class $1Mutation(object):
	create_${1/.+/\L$0\E/g:model} = Create$1.Field()
	update_${1/.+/\L$0\E/g:model} = Update$1.Field()
	delete_${1/.+/\L$0\E/g:model} = Delete$1.Field()


class $1Subscritption(object):

	"""Subscritption setup"""
	sub_${1/.+/\L$0\E/g:model} = graphene.Field(
		$1Type,
		description='subscribe to updated ${1/.+/\L$0\E/g:model}',
		$3=graphene.ID())

	def resolve_sub_${1/.+/\L$0\E/g:model}(self, info, **args):
		inst = relay.Node.get_node_from_global_id(info, input.get('$3'))
		try:
			gp_name = 'gqp.{0}-updated.{1}'.format(str.lower(inst.__class__.__name__), inst.pk)
			Group(gp_name).add(info.context.reply_channel)
			info.context.channel_session['Groups'] = ','.join(
				(gp_name, info.context.channel_session['Groups']))
		except:
			pass
		return inst
endsnippet

snippet PQConnection "description"
class ${4:${1:Model}${2:Model}Type}(DjangoObjectType):
	class Meta:
		model = $2
		only_fields = ($3)


class $1PQConnection(relay.Connection):
	page_info = graphene.Field(PaginatorInfo, required=True)

	class Meta:
		node = ${5:M2MType}

	class Edge:
		through = graphene.Field($4, description='Connection reason')

		def resolve_through(self, info, **args):
			return self.node.$6[0]
endsnippet
